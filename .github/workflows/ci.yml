name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Debug Poetry Installation (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Host "Checking Poetry installation..."
        Get-Command poetry -ErrorAction SilentlyContinue
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Poetry not found in PATH, checking common locations..."
          $poetryPaths = @(
            "$env:APPDATA\Python\Scripts\poetry.exe",
            "$env:USERPROFILE\.local\bin\poetry.exe",
            "$env:USERPROFILE\AppData\Roaming\Python\Scripts\poetry.exe"
          )
          foreach ($path in $poetryPaths) {
            if (Test-Path $path) {
              Write-Host "Found Poetry at: $path"
              $env:PATH = "$env:PATH;$(Split-Path $path)"
              break
            }
          }
        }
        Write-Host "Current PATH: $env:PATH"
        poetry --version
      shell: pwsh

    - name: Alternative Poetry Installation (Windows)
      if: runner.os == 'Windows'
      run: |
        try {
          poetry --version
        } catch {
          Write-Host "Poetry installation failed, trying pip install..."
          python -m pip install --user poetry
          $poetryPath = python -c "import site; print(site.USER_BASE + '\\Scripts')"
          $env:PATH = "$env:PATH;$poetryPath"
          Write-Host "Added to PATH: $poetryPath"
          poetry --version
        }
      shell: pwsh

    - name: Configure Poetry (Windows)
      if: runner.os == 'Windows'
      run: |
        poetry config virtualenvs.in-project true
      shell: pwsh

    - name: Configure Poetry (Unix)
      if: runner.os != 'Windows'
      run: |
        poetry config virtualenvs.in-project true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Verify package installation (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Host "Checking Poetry environment..."
        poetry env info
        Write-Host "Checking installed packages..."
        poetry show
        Write-Host "Testing Python module discovery..."
        poetry run python -c "import sys; print('Python path:'); [print(p) for p in sys.path]"
        Write-Host "Testing repo2context import..."
        poetry run python -c "import repo2context; print('repo2context version:', repo2context.__version__)"
        Write-Host "Testing CLI module..."
        poetry run python -c "import repo2context.cli; print('CLI module loaded successfully')"
      shell: pwsh

    - name: Verify package installation (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Checking Poetry environment..."
        poetry env info
        echo "Testing repo2context import..."
        poetry run python -c "import repo2context; print('repo2context version:', repo2context.__version__)"

    - name: Run tests
      run: |
        poetry run pytest tests/ -v --cov=src/repo2context --cov-report=xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run Black
      run: poetry run black --check src/ tests/

    - name: Run Ruff
      run: poetry run ruff check src/ tests/

    - name: Run MyPy
      run: poetry run mypy src/

  benchmark:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Create test repository
      run: |
        mkdir -p benchmark_repo
        for i in {1..100}; do
          echo "# File $i" > "benchmark_repo/file_$i.py"
          echo "def function_$i():" >> "benchmark_repo/file_$i.py"
          echo "    return $i" >> "benchmark_repo/file_$i.py"
        done

    - name: Run benchmark
      run: |
        cd benchmark_repo
        time poetry run repo2context --max-tokens 85000
        
    - name: Check self-generation
      run: |
        poetry run repo2context --max-tokens 85000
        ls -la .repo2context/
        echo "Generated context files:"
        wc -c .repo2context/*.md

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Build package
      run: poetry build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/ 